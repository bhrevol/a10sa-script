from ..utils.cases import pascal_case as pascal_case, snake_case as snake_case
from ..utils.dict import apply_to_keys as apply_to_keys
from _typeshed import Incomplete
from dataclasses import dataclass
from enum import IntEnum
from json import JSONDecoder, JSONEncoder
from typing import Any

class ProtocolSpec(IntEnum):
    v0 = 0
    v1 = 1
    v2 = 2
    v3 = 3
    @property
    def first(self) -> ProtocolSpec: ...
    @property
    def last(self) -> ProtocolSpec: ...

class FieldMeta(type):
    def __call__(cls, *args, **kwargs): ...

@dataclass
class Field(metaclass=FieldMeta): ...

class Decoder(JSONDecoder):
    def __init__(self, v: ProtocolSpec = ..., **kwargs) -> None: ...
    def decode(self, s: str, *args, **kwargs) -> list["Incoming"]: ...

@dataclass
class Incoming:
    @classmethod
    def __init_subclass__(cls, /, **kwargs) -> None: ...
    @classmethod
    def from_json(
        cls, json_object: dict[str, dict[str, Any]], v: ProtocolSpec = ...
    ) -> Incoming: ...
    id: int
    def __init__(self, id) -> None: ...

class Encoder(JSONEncoder):
    def default(self, o: Any) -> Any: ...

@dataclass
class AutoIncrementId:
    lower_bound: int = ...
    upper_bound: int = ...
    def __call__(self) -> int: ...
    def __init__(self, lower_bound=..., upper_bound=...) -> None: ...

message_id_generator: Incomplete

@dataclass
class Outgoing:
    id: int = ...
    def __init__(self) -> None: ...
