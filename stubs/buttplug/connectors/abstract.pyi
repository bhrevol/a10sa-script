import abc
from ..utils.cases import snake_case as snake_case
from abc import abstractmethod
from logging import Logger
from typing import Awaitable, Callable

Callback = Callable[[str], Awaitable[None]]

class Connector(metaclass=abc.ABCMeta):
    def __init__(self, logger: Logger = None) -> None: ...
    @property
    def callback(self) -> Callback: ...
    @callback.setter
    def callback(self, value: Callback) -> None: ...
    @callback.deleter
    def callback(self) -> None: ...
    @property
    def connected(self) -> bool: ...
    @property
    def logger(self) -> Logger: ...
    @abstractmethod
    async def connect(self) -> None: ...
    @abstractmethod
    async def disconnect(self) -> None: ...
    @abstractmethod
    async def send(self, message: str) -> None: ...
